<?php
class CreteSol_Crm_Model_Observer{
    public $salesObj;
    public $postCodeArray = array();
    public $skuCodeArray = array();
    public function cronscript()
    {
        Mage::log('cron executed', null, 'crm-cron.log');
        $this->salesObj = Mage::getModel('sales/order');
        
        $this->getPostCodeCsv(Mage::helper('crm/data')->getCrmCsvFile("postcodes.csv"));
        $this->getSkuCsv(Mage::helper('crm/data')->getCrmCsvFile("sku.csv"));
        
        $array = $this->getComplatedOrder();
        
        
    }
    
   /**
     *  get completed - sample order collection 
     * 
     * 
     * 
     * */

    public function getComplatedOrder()
    {
        $this->start = microtime(true);
        $_date = $this->getDateTime();
        $_fromDate = $_date['from_date'];
        $_toDate = $_date['to_date'];
        $order_collection = Mage::getModel('sales/order')->getCollection();
        $order_collection->addFieldToSelect('entity_id')
        ->addFieldToSelect('created_at')
            
            ->addAttributeToFilter('lead_status', array('in' => array(CreteSol_Crm_Helper_Data::STATE_PROCESSING)))
                   
                    
                ->setOrder('created_at', 'ASC')->setPageSize(50);
                
       
         $orderCount = $order_collection->count();
       
        Mage::log($orderCount,null,'orderCount.log');
        if ($orderCount > 0)
        {
            foreach ($order_collection as $orders):
             $orderDetail = array();
             
                 $this->start = microtime(true);
                $ordersDetail[$orders->getId()] = (int)$orders->getId();
               
                $itemArray = array();
                $hasSample = false;
                Mage::log($orders->getId() ,null,'orders.log');
                foreach ($orders->getAllItems() as $item):

                    $productId = $item->getProductId();
                    

                    $options = $item->getProductOptions();
                    
                   

                    if ($options['additional_options'][0]['label'] != '' && $options['additional_options'][0]['label'] ==
                        'Sample')
                    {
                        $orderDetail[$orders->getId()][$productId] = array(
                            'item_id' => (int)$productId,
                            'product_name' => trim($item->getName()),
                            'product_sku' => $item->getSku());
                        $orderDetail[$orders->getId()][$productId]['option'] = trim($options['additional_options'][0]['label']);

                        $hasSample = true;
                     }
                     if ($options["info_buyRequest"]["sample_options"] != '')
                        {
                            $orderDetail[$orders->getId()][$productId]['sample_option'] = trim($options["info_buyRequest"]["sample_options"]);
                            $hasSample = true;

                        }

                endforeach;
               
                $orderDetail[$orders->getId()]['has_sample'] = $hasSample;
                if($hasSample){
                $this->salesObj->load($orders->getId());
                if($this->salesObj->getLeadStatus() == 'processing'){
                    $this->salesObj->setData('lead_status', CreteSol_Crm_Helper_Data::STATE_UNCONVERTED);
                    $this->salesObj->getResource()->saveAttribute($this->salesObj,'lead_status');
                }
                
                }else{
                $this->salesObj->load($orders->getId());
                if($this->salesObj->getLeadStatus() !='converted_from'){
                    $this->salesObj->setData('lead_status',CreteSol_Crm_Helper_Data::STATE_FULL_ORDER);
                    $this->salesObj->getResource()->saveAttribute($this->salesObj,'lead_status');
                }
                
                }
                $hasSample = false;
                 
                 try{
                
                $address = $orders->getBillingAddress();
               
                $orderDetail[$orders->getId()]['email'] = trim($address->getEmail());
                $orderDetail[$orders->getId()]['postcode'] = trim($address->getPostcode());
                $orderDetail[$orders->getId()]['telephone'] = trim($address->getTelephone());
                $orderDetail[$orders->getId()]['region'] = trim($address->getRegion());
                $orderDetail[$orders->getId()]['city'] = trim($address->getCity());
                $orderDetail[$orders->getId()]['street'] = $address->getStreet(-1);
                $orderDetail[$orders->getId()]['created_at'] = $orders->getCreatedAt();
                
                }catch(Mage_Core_Exception $e){
                   
                }
                $this->setOrderAttributes( $orderDetail);
                $this->setOrderLeadStatus($orderDetail);
              
            endforeach;
          
        }
    }
    /**
     * To set the customer order attributes 
     * @param array filled by the getComplatedOrder function 
     * */

    public function setOrderAttributes($array = array())
    {  
        if (is_array($array))
        {
            foreach ($array as $key => $value)
            {
                if ($value['has_sample'])
                {
                    $_sizeArray = array();
                    $_skuArray = array();
                    $_nameArray = array();
                    foreach ($value as $k => $vv)
                    {
                          
                          if (isset($vv['sample_option']))
                                $_sizeArray[] = trim($vv['sample_option']);
                            if (isset($vv['product_sku']))
                                $_skuArray[] = trim($vv['product_sku']);
                            if (isset($vv['product_name']))
                                $_nameArray[] = trim($vv['product_name']);
                    
                    }
                        
                    $_skuWeightingArray = array();
                    foreach ($_skuArray as $sk)
                    {
                        $_skuWeightingArray[] = $this->skuCodeArray[$sk];
                    }
                    $_maxSkuWeighting = max($_skuWeightingArray);
                    $_cntProductName = implode('<br/> ', $_nameArray);
                    $_cntProductSku = implode('<br/> ', $_skuArray);
                    $_cntSampleSize = implode('<br/> ', $_sizeArray);

                    preg_match("/^([A-Z]{1,6})/", $value['postcode'], $prefix); //get the letter of postcode first 2 or 6 duplin
                    $prefix = $prefix[1];
                    $_postCodeWeighting = $this->postCodeArray[$prefix];
                    $this->salesObj->load($key);
                    if($this->salesObj->getSkuWeighting() == NULL || $this->salesObj->getPostWeighting() == NULL || $this->salesObj->getProductSku() == NULL){
                    $this->salesObj->setData('sample_size', $_cntSampleSize);
                    $this->salesObj->setData('sku_weighting', $_maxSkuWeighting);
                    $this->salesObj->setData('post_weighting', $_postCodeWeighting);
                    $this->salesObj->setData('product_name', $_cntProductName);
                    $this->salesObj->setData('product_sku', $_cntProductSku);
                    
                    $this->salesObj->getResource()->saveAttribute($this->salesObj,'sample_size');
                    $this->salesObj->getResource()->saveAttribute($this->salesObj,'sku_weighting');
                    $this->salesObj->getResource()->saveAttribute($this->salesObj,'post_weighting');
                    $this->salesObj->getResource()->saveAttribute($this->salesObj,'product_name');
                     $this->salesObj->getResource()->saveAttribute($this->salesObj,'product_sku');
                   // $this->salesObj->save();
                   $this->salesObj->reset();
                   }
                    //exit;
                } 
                
            }


        }
       
    }

    /**
     *  Set the order lead status according to calculation 
     * @param array $array
     * 
     * 
     * */
    public function setOrderLeadStatus($array = array())
    {

        foreach ($array as $key => $o)
        {
          
            if ($o['has_sample'])
            {

                $this->searchOrderByFilter($o['email'], $key, $o);
                
            }

        } 
    }
    

    public function searchOrderByFilter($search, $exorder, $o)
    {
        $_date = $this->getDateTime();
        $_fromDate = $_date['from_date'];
        $_toDate = $_date['to_date'];
        $itemArray = array();
       
        $_convertedOrderId = 0;
        $filteredCollection = Mage::getModel('sales/order')->getCollection()
            ->addFieldToSelect('entity_id')
            ->addAttributeToFilter('created_at',array('gteq'=>$o['created_at']))
            
                ->addAttributeToFilter('entity_id', array('nin' =>
                array($exorder)))
                
             ->addFieldToFilter(array('main_table.customer_email', 'oadr.telephone'),
            array(array('eq' => $search), array(array('eq' => $o['telephone']))))
            ->setOrder('main_table.created_at', 'ASC');
            
            //join table with sales_flat_order_address
            
          $filteredCollection->getSelect()->joinLeft(array('oadr' =>
                Mage::getSingleton('core/resource')->getTableName('sales_flat_order_address')),
            'main_table.entity_id = oadr.parent_id AND oadr.address_type="billing"', array(
            'oadr.telephone'));//->__toString();exit;//->setOrder('created_at', 'ASC'); //->getSelect()->__toString();
           $totalOrder = $filteredCollection->count();
        
        $this->salesObj->load($exorder);
        $salesObject = Mage::getModel('sales/order');
        
        if ($totalOrder > 0)
        {
            foreach ($filteredCollection as $orders):
                    $_leadStatusFlag = false;
                    $_itemMatched = false;
                    $_fullOrderFlag = false;
                    $_notSample = false;
                    $salesObject->load($orders->getId());
                   foreach ($orders->getAllItems() as $item):
                    $productId = $item->getProductId();


                    $options = $item->getProductOptions();
                        
                    if ($options['additional_options'][0]['label'] != 'Sample')
                    {
                        
                            if($salesObject->getLeadStatus() !='converted_from'){
                                $salesObject->setData('lead_status',CreteSol_Crm_Helper_Data::STATE_FULL_ORDER);
                                $salesObject->getResource()->saveAttribute($salesObject,'lead_status');
                            }
                                
                        $_notSample = true;
                        
                        if(array_key_exists($productId,$o))
                                 $_itemMatched = true;
                        
                      
                    }
                  
                endforeach;
                
                if($_itemMatched){
                    Mage::log($key.' matched '.$productId ,null,'key-prod-search.log');
                           
                                
                                $this->salesObj->setData('lead_status', CreteSol_Crm_Helper_Data::STATE_CONVERTED);
                                 //$this->salesObj->setData('converted_order', $orders->getId());
                                 $this->salesObj->getResource()->saveAttribute($this->salesObj,'lead_status');
                                 //$this->salesObj->getResource()->saveAttribute($this->salesObj,'converted_order');
                                 
                                 $salesObject->setData('lead_status',CreteSol_Crm_Helper_Data::STATE_CONVERTED_FROM);
                                 //$salesObject->setData('converted_order',$exorder);
                                 
                                 $salesObject->getResource()->saveAttribute($salesObject,'lead_status');
                                 //$salesObject->getResource()->saveAttribute($salesObject,'converted_order');
                                 $salesObject->reset();
                                 $crossRef = Mage::getModel('crm/crmorders');
                                 $crossRef->load();
                                 $crossRef->setData('crm_order_id',$exorder);
                                 $crossRef->setData('converted_order',$orders->getId());
                                 $crossRef->save();
                                 
                                   
                }
                
                Mage::log($key.' matched '.$productId ,null,'key-prod-match.log');
            endforeach;
            $salesObject->reset();
            
            $this->salesObj->setData('number_of_orders', $totalOrder);
           
           $this->salesObj->getResource()->saveAttribute($this->salesObj,'number_of_orders');
               
             $this->salesObj->reset();
            
              $this->total = (microtime(true) - $this->start)/60;
              Mage::log($this->total,null,'order-took-time.log');      
        } 
    }
    /**
     * @return array $array with index from date and to date
     * 
     * */
    public function getDateTime()
    {
        //$_configDateOptions =  Mage::getStoreConfig('crm/crm_group/date_options',Mage::app()->getStore());
        //if($_configDateOptions == '')
            $_configDateOptions = ' -10 months';
        $date = date('Y-m-d', Mage::getModel('core/date')->timestamp(time()));
        $fromDate =date('Y-m-d', strtotime('2015-01-26' )); //date('Y-m-d', strtotime('2015-03-08' . $_configDateOptions));
        $toDate = date('Y-m-d', strtotime('2015-01-28'));
        //$toDate = date('Y-m-d', Mage::getModel('core/date')->timestamp(time()));
        //echo $fromDate . ' - '. $toDate; exit;
        return array('from_date' => $fromDate, 'to_date' => $toDate);
    }

    /**
     * load post code csv and arrage it in key value like post char will be index and weighting will be value.
     * @param file path 
     * */
    public function getPostCodeCsv($file)
    {
        if(file_exists($file)){
        $objCsv = new Varien_File_Csv();
        $data = $objCsv->getData($file);
        if ($data)
        {
            // get first array as column name
            $columns = array_shift($data);

            // for remaining array items replace array keys with column names.
            foreach ($data as $k => $v)
            {
                $data[$k] = array_combine($columns, array_values($v));
            }
        }
        $data1 = array();
        foreach ($data as $k => $v)
        {

            foreach ($v as $s => $j)
            {
                if ($s == 'Postcode Area')
                    $data1[$j] = $v['Weighting'];
            }

        }
        $this->postCodeArray = array_change_key_case($data1,CASE_UPPER);
        }else{
            Mage::throwException("File not found....".$file);
        }
    }
    public function getSkuCsv($file)
    {
        if(file_exists($file)){
        
        
        $objCsv = new Varien_File_Csv();
        $data = $objCsv->getData($file);
        
        if (true)
        {
            // get first array as column name
            $columns = array_shift($data);

            // for remaining array items replace array keys with column names.
            foreach ($data as $k => $v)
            {
                $data[$k] = array_combine($columns, array_values($v));
            }
        }
        $data1 = array();
        foreach ($data as $k => $v)
        {

            foreach ($v as $s => $j)
            {
                if ($s == 'Sku')
                    $data1[$j] = $v['Weighting'];
            }

        }
        $this->skuCodeArray = $data1;
        }else{
            $this->_redirect('*/*/');
        }
    }
}